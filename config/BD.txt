-- Crear la base de datos
CREATE DATABASE IF NOT EXISTS blao5xqfq9hfx2xk7rgf;

-- Usar la base de datos
USE blao5xqfq9hfx2xk7rgf;

-- Crear tabla de Usuarios
CREATE TABLE IF NOT EXISTS usuarios (
    idUsuario INT AUTO_INCREMENT PRIMARY KEY,
    nombreUsuario VARCHAR(100) NOT NULL,
    apellidoUsuario VARCHAR(100) NOT NULL,
    edadUsuario INT NOT NULL,
    correoUsuario VARCHAR(100) NOT NULL UNIQUE,
    telefonoUsuario VARCHAR(20) NOT NULL,
    contrasenaUsuario VARCHAR(255) NOT NULL,
    tipoUsuario ENUM('cliente', 'admin', 'otro') NOT NULL
);

-- Crear tabla de Horarios
CREATE TABLE IF NOT EXISTS horarios (
    idHorario INT AUTO_INCREMENT PRIMARY KEY,
    horaProgramada TIME NOT NULL,
    turno ENUM('mañana', 'tarde', 'noche') NOT NULL
);

-- Crear tabla de Salas
CREATE TABLE IF NOT EXISTS salas (
    idSala INT AUTO_INCREMENT PRIMARY KEY,
    nombreSala VARCHAR(100) NOT NULL,
    cantidadAsientos INT NOT NULL
);

-- Crear tabla de Películas
CREATE TABLE IF NOT EXISTS peliculas (
    idPelicula INT AUTO_INCREMENT PRIMARY KEY,
    nombrePelicula VARCHAR(255) NOT NULL,
    directorPelicula VARCHAR(255) NOT NULL,
    duracionPelicula INT NOT NULL,
    actoresPelicula TEXT NOT NULL,
    clasificacionPelicula VARCHAR(50) NOT NULL,
    idHorario INT NOT NULL,
    FOREIGN KEY (idHorario) REFERENCES horarios(idHorario)
);

-- Crear tabla de Asientos
CREATE TABLE IF NOT EXISTS asientos (
    idAsiento INT AUTO_INCREMENT PRIMARY KEY,
    filaAsiento VARCHAR(10) NOT NULL,
    idSalaAsiento INT NOT NULL,
    numeroAsiento INT NOT NULL,
    estadoAsiento ENUM('disponible', 'ocupado') NOT NULL,
    FOREIGN KEY (idSalaAsiento) REFERENCES salas(idSala)
);

-- Crear tabla de Pagos
CREATE TABLE IF NOT EXISTS pagos (
    idCompra INT AUTO_INCREMENT PRIMARY KEY,
    idUsuario INT NOT NULL,
    cantidadPago INT NOT NULL,
    metodoPago ENUM('tarjeta', 'efectivo', 'terceros') NOT NULL,
    FOREIGN KEY (idUsuario) REFERENCES usuarios(idUsuario)
);

-- Crear tabla de Boletos
CREATE TABLE IF NOT EXISTS boletos ( 
    idBoleto INT AUTO_INCREMENT PRIMARY KEY,
    idPelicula INT NOT NULL,
    idHorario INT NOT NULL,
    idSala INT NOT NULL, 
    idPago INT NOT NULL,
    idAsientoReservado INT NOT NULL,
    fechaReserva DATETIME NOT NULL,
    fechaExpiracion DATETIME NOT NULL,
    FOREIGN KEY (idPelicula) REFERENCES peliculas(idPelicula),
    FOREIGN KEY (idHorario) REFERENCES horarios(idHorario),
    FOREIGN KEY (idSala) REFERENCES salas(idSala),
    FOREIGN KEY (idPago) REFERENCES pagos(idCompra),
    FOREIGN KEY (idAsientoReservado) REFERENCES asientos(idAsiento) );

-- Crear tabla de Logs
CREATE TABLE IF NOT EXISTS logs (
    idLog INT AUTO_INCREMENT PRIMARY KEY,
    usuario VARCHAR(100) NOT NULL,
    accion TEXT NOT NULL,
    fechaHora DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO usuarios (nombreUsuario, apellidoUsuario, edadUsuario, correoUsuario, telefonoUsuario, contrasenaUsuario, tipoUsuario)
VALUES
  ('Juan Perez', 'Martinez', 28, 'juan.perez@correo.com', '1234567890', 'clave123', 'cliente'),
  ('Maria Garcia', 'Lopez', 35, 'maria.garcia@correo.com', '9876543210', 'miclave456', 'admin'),
  ('Pedro Gonzalez', 'Rodriguez', 42, 'pedro.gonzalez@correo.com', '0123456789', 'mipass789', 'otro'),
  ('Ana Sanchez', 'Flores', 18, 'ana.sanchez@correo.com', '5432109876', 'miclave123', 'cliente'),
  ('Carlos Lopez', 'Ruiz', 55, 'carlos.lopez@correo.com', '6789012345', 'mipass234', 'admin');

INSERT INTO horarios (horaProgramada, turno)
VALUES
  ('09:00:00', 'mañana'),
  ('11:00:00', 'mañana'),
  ('13:00:00', 'tarde'),
  ('15:00:00', 'tarde'),
  ('17:00:00', 'tarde'),
  ('19:00:00', 'noche'),
  ('21:00:00', 'noche'),
  ('23:00:00', 'noche');

INSERT INTO salas (nombreSala, cantidadAsientos)
VALUES
  ('Sala 1', 100),
  ('Sala 2', 75),
  ('Sala 3', 50),
  ('Sala VIP', 25);

INSERT INTO peliculas (nombrePelicula, directorPelicula, duracionPelicula, actoresPelicula, clasificacionPelicula, idHorario)
VALUES
  ('Batman: El Caballero de la Noche', 'Christopher Nolan', 152, 'Christian Bale, Heath Ledger, Michael Caine', 'Acción', 2),
  ('El Padrino', 'Francis Ford Coppola', 175, 'Marlon Brando, Al Pacino, James Caan', 'Drama', 3),
  ('El Señor de los Anillos: La Comunidad del Anillo', 'Peter Jackson', 178, 'Elijah Wood, Ian McKellen, Sean Astin', 'Aventura', 1),
  ('Titanic', 'James Cameron', 194, 'Leonardo DiCaprio, Kate Winslet, Billy Zane', 'Romance', 5),
  ('Star Wars: Episodio IV - Una Nueva Esperanza', 'George Lucas', 121, 'Mark Hamill, Harrison Ford, Carrie Fisher', 'Ciencia Ficción', 6);

INSERT INTO asientos (filaAsiento, idSalaAsiento, numeroAsiento, estadoAsiento)
VALUES
  ('A', 1, 1, 'disponible'),
  ('A', 1, 2, 'disponible'),
  ('A', 1, 3, 'disponible'),
  ('B', 1, 4, 'disponible'),
  ('B', 1, 5, 'disponible'),
  ('C', 2, 6, 'disponible'),
  ('C', 2, 7, 'disponible'),
  ('C', 2, 8, 'disponible'),
  ('D', 2, 9, 'disponible'),
  ('D', 2, 10, 'disponible'),
  ('E', 3, 11, 'disponible'),
  ('E', 3, 12, 'disponible'),
  ('E', 3, 13, 'disponible'),
  ('F', 3, 14, 'disponible'),
  ('F', 3, 15, 'disponible'),
  ('G', 4, 16, 'disponible'),
  ('G', 4, 17, 'disponible'),
  ('G', 4, 18, 'disponible'),
  ('H', 4, 19, 'disponible'),
  ('H', 4, 20, 'disponible');


INSERT INTO boletos (idPelicula, idHorario, idSala, idPago, idAsientoReservado, fechaReserva, fechaExpiracion)
VALUES
  (1, 2, 1, 1, 1, NOW(), DATE_ADD(NOW(), INTERVAL 1 HOUR)),  -- Reservación para 'Batman', 'tarde', 'Sala 1', 'A1', pago 1, expira en 1 hora
  (2, 1, 2, 2, 10, NOW(), DATE_ADD(NOW(), INTERVAL 30 MINUTE)),  -- Reservación para 'El Padrino', 'mañana', 'Sala 2', 'C1', pago 2, expira en 30 minutos
  (3, 1, 3, 3, 15, NOW(), DATE_ADD(NOW(), INTERVAL 2 HOUR)),  -- Reservación para 'El Señor de los Anillos', 'mañana', 'Sala 3', 'D1', pago 3, expira en 2 horas
  (4, 5, 4, 4, 20, NOW(), DATE_ADD(NOW(), INTERVAL 1 DAY)),  -- Reservación para 'Titanic', 'noche', 'Sala VIP', 'E1', pago 4, expira en 1 día
  (5, 6, 1, 5, 25, NOW(), DATE_ADD(NOW(), INTERVAL 3 DAY));  -- Reservación para 'Star Wars', 'noche', 'Sala 1', 'F1', pago 5, expira en 3 días


INSERT INTO pagos (idUsuario, cantidadPago, metodoPago)
VALUES
  (1, 30, 'efectivo'),  -- Pago del usuario 1 por la reserva del boleto 1
  (2, 45, 'tarjeta'),  -- Pago del usuario 2 por la reserva del boleto 2
  (3, 50, 'efectivo'),  -- Pago del usuario 3 por la reserva del boleto 3
  (4, 80, 'tarjeta'),  -- Pago del usuario 4 por la reserva del boleto 4
  (5, 65, 'efectivo'),  -- Pago del usuario 5 por la reserva del boleto 5
  (1, 30, 'efectivo'),  -- Pago del usuario 1 por la reserva del boleto 6 (otra reservación)
  (2, 45, 'tarjeta'),  -- Pago del usuario 2 por la reserva del boleto 7 (otra reservación)
  (3, 50, 'efectivo'),  -- Pago del usuario 3 por la reserva del boleto 8 (otra reservación)
  (4, 80, 'tarjeta'),  -- Pago del usuario 4 por la reserva del boleto 9 (otra reservación)
  (5, 65, 'efectivo');  -- Pago del usuario 5 por la reserva del boleto 10 (otra reservación)


CREATE VIEW vista_usuarios AS
SELECT idUsuario, nombreUsuario, apellidoUsuario, tipoUsuario
FROM usuarios;

CREATE VIEW vista_peliculas_detallada AS
SELECT p.nombrePelicula, p.directorPelicula, h.horaProgramada, h.turno,
       b.idBoleto, b.idAsientoReservado, a.filaAsiento, a.numeroAsiento, b.fechaReserva, b.fechaExpiracion
FROM peliculas p
JOIN horarios h ON p.idHorario = h.idHorario
LEFT JOIN boletos b ON p.idPelicula = b.idPelicula
LEFT JOIN asientos a ON b.idAsientoReservado = a.idAsiento;

CREATE VIEW vista_boletos AS
SELECT b.idBoleto,
       pelicula.nombrePelicula,
       h.horaProgramada, h.turno,
       s.nombreSala,
       a.filaAsiento, a.numeroAsiento,
       b.fechaReserva, b.fechaExpiracion
FROM boletos b
JOIN peliculas pelicula ON b.idPelicula = pelicula.idPelicula
JOIN horarios h ON b.idHorario = h.idHorario
JOIN salas s ON b.idSala = s.idSala
JOIN asientos a ON b.idAsientoReservado = a.idAsiento;
